import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as s,c as h,a as e,d as a,b as t,w as c,e as n}from"./app-dpxkCdiI.js";const l={},u=n('<h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2><h3 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> <code>id</code></h3><ul><li><strong>Type:</strong> <code>int</code></li></ul><p>Unique user ID. This number can have 32-52 significant bits. Therefore, a 64-bit signed integer or double-precision float type is safe to store this identifier.</p><h3 id="firstname" tabindex="-1"><a class="header-anchor" href="#firstname" aria-hidden="true">#</a> <code>firstName</code></h3><ul><li><strong>Type:</strong> <code>string</code></li></ul><p>First name of the user.</p><h3 id="lastname" tabindex="-1"><a class="header-anchor" href="#lastname" aria-hidden="true">#</a> <code>lastName</code></h3><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>null</code></li></ul><p><em>Optional.</em> Last name of the user.</p><h3 id="username" tabindex="-1"><a class="header-anchor" href="#username" aria-hidden="true">#</a> <code>username</code></h3><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>null</code></li></ul><p><em>Optional.</em> Username of the user.</p><h3 id="photourl" tabindex="-1"><a class="header-anchor" href="#photourl" aria-hidden="true">#</a> <code>photoUrl</code></h3><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>null</code></li></ul><p><em>Optional.</em> URL of the userâ€™s profile photo. The photo can be in <code>.jpeg</code> or <code>.svg</code> formats.</p><h3 id="authdate" tabindex="-1"><a class="header-anchor" href="#authdate" aria-hidden="true">#</a> <code>authDate</code></h3>',17),p=e("strong",null,"Type:",-1),f={href:"https://carbon.nesbot.com/docs/",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"CarbonInterface",-1),m=n('<p>A date interface for obtaining the time of opening a form in <code>Unix</code> format, and not only that.</p><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> <code>hash</code></h3><ul><li><strong>Type:</strong> <code>string</code></li></ul><p>A hash of all passed parameters, with which the validator can check their validity.</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="toarray" tabindex="-1"><a class="header-anchor" href="#toarray" aria-hidden="true">#</a> <code>toArray</code></h3><p>Returns the entity, including children (if any), as an array.</p>',7),_={href:"https://core.telegram.org/widgets/login#receiving-authorization-data",target:"_blank",rel:"noopener noreferrer"};function b(x,y){const i=r("RouterLink"),o=r("ExternalLinkIcon");return s(),h("div",null,[e("p",null,[a("This object contains the data returned after successful authentication with "),t(i,{to:"/en/docs/validator/login-widget.html"},{default:c(()=>[a("login widget")]),_:1}),a(".")]),u,e("ul",null,[e("li",null,[p,a(),e("a",f,[g,t(o)])])]),m,e("p",null,[e("a",_,[a("Created on the basis of official documentation"),t(o)])])])}const v=d(l,[["render",b],["__file","login-widget.html.vue"]]);export{v as default};
