import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as p,a as e,d as t,b as a,w as s,e as r}from"./app-wj6CG0dg.js";const d={},h=e("code",null,"HMAC-SHA-256",-1),u=e("code",null,"SHA256",-1),g={href:"https://core.telegram.org/widgets/login#checking-authorization",target:"_blank",rel:"noopener noreferrer"},m=r(`<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><div class="language-php line-numbers-mode" data-ext="php" data-title="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$bot</span><span class="token operator">-&gt;</span><span class="token function">validateLoginWidget</span><span class="token punctuation">(</span>
  <span class="token argument-name">user</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string single-quoted-string">&#39;auth_date&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1679130118</span><span class="token punctuation">,</span>
      <span class="token string single-quoted-string">&#39;first_name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Ð¡ÐµÑ€Ð³Ñ–Ð¹&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// other fields</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token keyword">throw</span><span class="token punctuation">:</span> <span class="token constant boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),v=e("h2",{id:"parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters"},[e("span",null,"Parameters")])],-1),f=e("h3",{id:"user",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#user"},[e("span",null,[e("code",null,"user")])])],-1),k=e("ul",null,[e("li",null,[t("Type: "),e("code",null,"array")]),e("li",null,"Required: Yes")],-1),y=e("p",null,"An array of raw user data returned by the authorization widget.",-1),b={href:"https://core.telegram.org/widgets/login#receiving-authorization-data",target:"_blank",rel:"noopener noreferrer"},_=r('<h3 id="throw" tabindex="-1"><a class="header-anchor" href="#throw"><span><code>throw</code></span></a></h3><ul><li>Type: <code>bool</code></li><li>Required: No</li><li>Default: <code>null</code>. Default settings apply</li></ul><p>If set to <code>true</code>, the library will throw an exception if validation fails.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Be sure to use <code>try/catch</code> if you plan to handle exceptions ðŸ˜‰</p><p>If exceptions are enabled, you will get a [ValidationException] exception after a validation failure(../exception/validation.md). Otherwise, `false&#39; will be returned.</p></div>',4);function w(x,T){const n=i("ExternalLinkIcon"),o=i("RouteLink");return c(),p("div",null,[e("p",null,[t("We verify the authentication and integrity of the received data by comparing the received hash parameter to the hexadecimal representation of the "),h,t(" signature of the data validation string with the "),u,t(" hash of the bot token used as the secret key. Details "),e("a",g,[t("here"),a(n)])]),e("p",null,[t("ðŸš€ A complete code example is available at "),a(o,{to:"/en/docs/example/login-winget.html"},{default:s(()=>[t("this page")]),_:1})]),m,e("p",null,[t("ðŸ’¡ Upon successful validation, the method will return a "),a(o,{to:"/en/docs/entity/login-widget.html"},{default:s(()=>[t("LoginWidget")]),_:1}),t(" entity that contains all existing user data that can be used on your server.")]),v,f,k,y,e("p",null,[e("a",b,[t("Additional Information"),a(n)])]),_])}const L=l(d,[["render",w],["__file","login-widget.html.vue"]]),H=JSON.parse('{"path":"/en/docs/validator/login-widget.html","title":"Login Widget","lang":"en-US","frontmatter":{"title":"Login Widget","icon":"right-to-bracket","order":2,"head":[["meta",{"name":"description","content":"Securely validate Telegram Login Widget users in your PHP project using the TgWebValid library."}],["link",{"rel":"alternate","hreflang":"uk-ua","href":"https://tgwebvalid.com/docs/validator/login-widget.html"}],["meta",{"property":"og:url","content":"https://tgwebvalid.com/en/docs/validator/login-widget.html"}],["meta",{"property":"og:site_name","content":"The PHP library for validate Telegram users"}],["meta",{"property":"og:title","content":"Login Widget"}],["meta",{"property":"og:description","content":"We verify the authentication and integrity of the received data by comparing the received hash parameter to the hexadecimal representation of the HMAC-SHA-256 signature of the d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"uk-UA"}],["meta",{"property":"og:updated_time","content":"2024-02-15T22:13:59.000Z"}],["meta",{"property":"article:author","content":"Mr. Anonymous"}],["meta",{"property":"article:modified_time","content":"2024-02-15T22:13:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Login Widget\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-15T22:13:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr. Anonymous\\",\\"url\\":\\"https://github.com/CrazyTapok-bit\\"}]}"]],"description":"We verify the authentication and integrity of the received data by comparing the received hash parameter to the hexadecimal representation of the HMAC-SHA-256 signature of the d..."},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[{"level":3,"title":"user","slug":"user","link":"#user","children":[]},{"level":3,"title":"throw","slug":"throw","link":"#throw","children":[]}]}],"git":{"createdTime":1704439395000,"updatedTime":1708035239000,"contributors":[{"name":"Ð¡ÐµÑ€Ð³Ñ–Ð¹","email":"61122611+CrazyTapok-bit@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":0.72,"words":216},"filePathRelative":"en/docs/validator/login-widget.md","localizedDate":"January 5, 2024","autoDesc":true}');export{L as comp,H as data};
